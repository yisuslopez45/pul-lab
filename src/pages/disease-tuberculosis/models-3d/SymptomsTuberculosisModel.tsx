/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { JSX, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'


type GLTFResult = GLTF & {
  nodes: {
    Symptom: THREE.Mesh
  }
  materials: {
    Material_0: THREE.MeshStandardMaterial
  }
}

export function SymptomsTuberculosisModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models-3d/tuberculosis/sintomas.glb') as unknown as GLTFResult 
  const groupRef = useRef<THREE.Group>(null);
  useFrame(() => {
        if (groupRef.current) {
          groupRef.current.rotation.y += 0.003;
        }
      });
  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Symptom.geometry}
        material={materials.Material_0}
      />
    </group>
  )
}

useGLTF.preload('/models-3d/tuberculosis/sintomas.glb')