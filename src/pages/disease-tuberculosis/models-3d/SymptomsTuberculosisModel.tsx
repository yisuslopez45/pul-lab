/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { JSX, useRef } from 'react'
import { useGLTF, useKeyboardControls } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import useStoreLung from '../../disease-pneumonia/store/useStoreLung'


type GLTFResult = GLTF & {
  nodes: {
    Symptom: THREE.Mesh
  }
  materials: {
    Material_0: THREE.MeshStandardMaterial
  }
}

export function SymptomsTuberculosisModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models-3d/tuberculosis/sintomas.glb') as unknown as GLTFResult
  const groupRef = useRef<THREE.Group>(null);
  const [, get] = useKeyboardControls();
  const { isActiveAnimation } = useStoreLung()
  useFrame(() => {
    if (!groupRef.current)return
    if (isActiveAnimation) {
      groupRef.current.rotation.y += 0.03;
    } else {
      groupRef.current.rotation.y += 0.003;
    }
    const { animation } = get();
    if (animation && groupRef.current) {
      groupRef.current.rotation.y += 0.04;
    }
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.003;
    }
  });
  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Symptom.geometry}
        material={materials.Material_0}
      />
    </group>
  )
}

useGLTF.preload('/models-3d/tuberculosis/sintomas.glb')